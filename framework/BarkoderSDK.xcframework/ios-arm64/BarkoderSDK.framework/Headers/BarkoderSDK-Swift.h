#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef BARKODERSDK_SWIFT_H
#define BARKODERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Barkoder;
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BarkoderSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class UIColor;
@class Config;
enum BarkoderResolution : NSInteger;
@class NSString;
@class LicenseCheckResult;

SWIFT_CLASS("_TtC11BarkoderSDK14BarkoderConfig")
@interface BarkoderConfig : NSObject
/// Retrieves/Sets the color of the lines outlining the Region of Interest (ROI) for barcode scanning on the camera feed
@property (nonatomic, strong) UIColor * _Nonnull roiLineColor;
/// Retrieves/Sets the width of the lines outlining the Region of Interest (ROI) for barcode scanning on the camera feed
/// note:
/// Default value is 2.0
@property (nonatomic) float roiLineWidth;
/// Retrieves/Sets the background color of the overlay within the Region of Interest (ROI) for barcode scanning on the camera feed
@property (nonatomic, strong) UIColor * _Nonnull roiOverlayBackgroundColor;
/// Retrieves/Sets the color of the scanning indicator for barcode scanning on the camera feed
@property (nonatomic, strong) UIColor * _Nonnull scanningIndicatorColor;
/// Retrieves/Sets the width of the scanning indicator for barcode scanning on the camera feed
/// note:
/// Default value is 2.0
@property (nonatomic) float scanningIndicatorWidth;
/// Retrieves/Sets the animation of the scanning indicator for barcode scanning on the camera feed
/// note:
/// Default value is 0
@property (nonatomic) NSInteger scanningIndicatorAnimation;
/// Retrieves/Sets the scanning indicator to be always shown for barcode scanning on the camera feed
/// note:
/// Default value is false
@property (nonatomic) BOOL scanningIndicatorAlwaysVisible;
/// Retrieves/Sets the visibility of the Region of Interest (ROI) on the camera preview
/// note:
/// Default value is true
@property (nonatomic) BOOL regionOfInterestVisible;
/// Retrieves/Sets the hexadecimal color code representing the line color used to indicate the location of detected barcodes
@property (nonatomic, strong) UIColor * _Nonnull locationLineColor;
/// Retrieves/Sets the width of the lines indicating the location of detected barcodes on the camera feed
/// note:
/// Default value is 2
@property (nonatomic) float locationLineWidth;
/// Enables or disables the pinch-to-zoom feature for adjusting the zoom level during barcode scanning
/// note:
/// Default value is false
@property (nonatomic) BOOL pinchToZoomEnabled;
/// Enables or disables the audible beep sound upon successfully decoding a barcode
/// note:
/// Default value is true
@property (nonatomic) BOOL beepOnSuccessEnabled;
/// Enables or disables the device vibration upon successfully decoding a barcode.
/// note:
/// Default value is true
@property (nonatomic) BOOL vibrateOnSuccessEnabled;
/// Enables or disables the automatic closing of the scanning session upon detecting a barcode result
/// note:
/// Default value is true
@property (nonatomic) BOOL closeSessionOnResultEnabled;
/// Enables or disables the capturing and processing of image data when a barcode is successfully detected
/// note:
/// Default value is false
@property (nonatomic) BOOL imageResultEnabled;
/// Enables or disables the inclusion of barcode location information within the image data result
/// note:
/// Default value is false
@property (nonatomic) BOOL locationInImageResultEnabled;
/// Enables or disables the display of barcode location information on the camera preview
/// note:
/// Default value is true
@property (nonatomic) BOOL locationInPreviewEnabled;
/// Configures the Barkoder functionality based on the provided configuration
@property (nonatomic, strong) Config * _Nullable decoderConfig;
/// Retrieve/Sets the resolution for barcode scanning
/// note:
/// Default value is BarkoderView.BarkoderResolution.HD
@property (nonatomic) enum BarkoderResolution barkoderResolution;
/// Retrieve/Sets whether to enable barcode thumbnail on result
/// note:
/// Default value is true
@property (nonatomic) BOOL barcodeThumbnailOnResult;
/// Retrieve/Sets the threshold between duplicate scans
@property (nonatomic) NSInteger thresholdBetweenDuplicatesScans;
/// Defines the Region of Interest (ROI) on the camera preview for barcode scanning, specifying an area where the application focuses on detecting barcodes
- (BOOL)setRegionOfInterest:(CGRect)value error:(NSError * _Nullable * _Nullable)error;
/// Retrieves the region of interest (ROI)
/// note:
/// Default value is ‘CGRect(x: 3, y: 30, width: 94, height: 40)’
- (CGRect)getRegionOfInterest SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithLicenseKey:(NSString * _Nonnull)licenseKey licenseCheckHandler:(void (^ _Nonnull)(LicenseCheckResult * _Nonnull))licenseCheckHandler;
/// Set maximum threads that will be used for the decoding process
/// <ul>
///   <li>
///     Throws Error if input param is greater than maximum threads available on that device
///   </li>
/// </ul>
/// \param value [1, max threads available]
///
- (BOOL)setThreadsLimit:(NSInteger)value error:(NSError * _Nullable * _Nullable)error;
/// Get maximum threads that are used for the decoding process
- (NSInteger)getThreadsLimit SWIFT_WARN_UNUSED_RESULT;
/// Sets whether multi-code caching is enabled
- (void)setMulticodeCachingEnabled:(BOOL)boolean;
/// Retrieves whether multi-code caching is enabled
- (BOOL)getMulticodeCachingEnabled SWIFT_WARN_UNUSED_RESULT;
/// Sets the caching duration (in milliseconds) for multi-code results
- (void)setMulticodeCachingDuration:(NSInteger)value;
/// Retrieves the caching duration (in milliseconds) for multi-code results
- (NSInteger)getMulticodeCachingDuration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@protocol BarkoderResultDelegate;
enum BarkoderConfigTemplate : NSInteger;
@class NSURL;
@class NSData;

SWIFT_CLASS("_TtC11BarkoderSDK14BarkoderHelper")
@interface BarkoderHelper : NSObject
/// Scan barcode from bitmap image
/// \param image Image that you want to be scanned as UIImage
///
/// \param bkdConfig config that will be used for scanning process
///
/// \param resultDelegate where you will receive scanned result
///
+ (void)scanImage:(UIImage * _Nonnull)image bkdConfig:(BarkoderConfig * _Nonnull)bkdConfig resultDelegate:(id <BarkoderResultDelegate> _Nonnull)resultDelegate;
/// Opens the device’s photo gallery, allowing you to choose an image to be processed for barcode scanning.
/// \param bkdConfig config that will be used for scanning process
///
/// \param resultDelegate where you will receive scanned result
///
+ (void)scanFromGalleryWithBkdConfig:(BarkoderConfig * _Nonnull)bkdConfig resultDelegate:(id <BarkoderResultDelegate> _Nonnull)resultDelegate;
/// Apply config params from predefined template
/// \param config that will be configured
///
/// \param template that will be applied on config
///
/// \param finished that will be executed when this function is finished
///
+ (void)applyConfigSettingsFromTemplate:(BarkoderConfig * _Nonnull)config template:(enum BarkoderConfigTemplate)template_ finished:(void (^ _Nonnull)(BarkoderConfig * _Nonnull))finished;
/// Retrieve config properties from the URL and apply them in the config that is send as input param
/// \param config that will be configured
///
/// \param url URL to the JSON file
///
/// \param finished callback that will be executed when this function is finished
///
+ (void)applyConfigSettingsFromURL:(BarkoderConfig * _Nonnull)config url:(NSURL * _Nonnull)url finished:(void (^ _Nonnull)(BarkoderConfig * _Nullable, NSError * _Nullable))finished;
/// Retrieve config properties from the URL and apply them in the config that is send as input param
/// \param config that will be configured
///
/// \param url filePath to the JSON file
///
/// \param finished callback that will be executed when this function is finished
///
+ (void)applyConfigSettingsFromFile:(BarkoderConfig * _Nonnull)config url:(NSString * _Nonnull)url finished:(void (^ _Nonnull)(BarkoderConfig * _Nullable, NSError * _Nullable))finished;
+ (void)applyConfigSettingsFromJson:(BarkoderConfig * _Nonnull)config jsonData:(NSData * _Nonnull)jsonData finished:(void (^ _Nonnull)(BarkoderConfig * _Nullable, NSError * _Nullable))finished;
/// Export config that is send as input param to JSON string
/// \param barkoderConfig config that will be exported
///
///
/// returns:
/// JSON string
+ (NSString * _Nullable)configToJSON:(BarkoderConfig * _Nonnull)barkoderConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BarkoderConfigTemplate, open) {
  BarkoderConfigTemplateAll = 0,
  BarkoderConfigTemplatePdf_optimized = 1,
  BarkoderConfigTemplateQr = 2,
  BarkoderConfigTemplateRetail_1d = 3,
  BarkoderConfigTemplateIndustrial_1d = 4,
  BarkoderConfigTemplateAll_2d = 5,
  BarkoderConfigTemplateDpm = 6,
  BarkoderConfigTemplateVin = 7,
  BarkoderConfigTemplateDotcode = 8,
  BarkoderConfigTemplateAll_1d = 9,
  BarkoderConfigTemplateMrz = 10,
  BarkoderConfigTemplateGallery_scan = 11,
  BarkoderConfigTemplateComposite = 12,
};



SWIFT_PROTOCOL("_TtP11BarkoderSDK27BarkoderPerformanceDelegate_")
@protocol BarkoderPerformanceDelegate
@optional
- (void)performanceReceivedWithFps:(float)fps dps:(float)dps;
@end


SWIFT_PROTOCOL("_TtP11BarkoderSDK29BarkoderPreviewFramesDelegate_")
@protocol BarkoderPreviewFramesDelegate
@optional
- (void)cameraFrameReceivedWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer;
@end


SWIFT_PROTOCOL("_TtP11BarkoderSDK22BarkoderResultDelegate_")
@protocol BarkoderResultDelegate
- (void)scanningFinished:(NSArray<DecoderResult *> * _Nonnull)decoderResults thumbnails:(NSArray<UIImage *> * _Nullable)thumbnails image:(UIImage * _Nullable)image;
@end

@class NSCoder;
enum BarkoderCameraPosition : NSInteger;

SWIFT_CLASS("_TtC11BarkoderSDK12BarkoderView")
@interface BarkoderView : UIView <BarkoderPreviewFramesDelegate>
@property (nonatomic, strong) BarkoderConfig * _Nullable config;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Start the camera preview only, without decoding
- (void)startCamera;
- (void)setPreviewFramesDelegate:(id <BarkoderPreviewFramesDelegate> _Nullable)delegate;
/// Set callback for getting fps and dps for checking performance
/// \param delegate Callback which return fps and dps as Float
///
- (void)setBarkoderPerformanceDelegate:(id <BarkoderPerformanceDelegate> _Nullable)delegate;
/// Initiates the barcode scanning process, allowing the application to detect and decode barcodes from the device’s camera feed
- (BOOL)startScanning:(id <BarkoderResultDelegate> _Nonnull)resultDelegate error:(NSError * _Nullable * _Nullable)error;
/// Halts the barcode scanning process, stopping the camera from capturing and processing barcode information
- (void)stopScanning;
/// Temporarily suspends the barcode scanning process, pausing the camera feed without completely stopping the scanning session
- (void)pauseScanning;
/// Sets the zoom factor for the device’s camera, adjusting the level of zoom during barcode scanning
- (void)setZoomFactor:(float)zoomFactor;
/// Sets the camera to be used for scanning (back/front).
/// \param position The desired camera position. Default is back
///
- (void)setCamera:(enum BarkoderCameraPosition)position;
/// Enables or disables the device’s flash (torch) for illumination during barcode scanning
/// \param enabled [true, false]. Default value is false
///
- (void)setFlash:(BOOL)enabled;
/// Retrieves the maximum available zoom factor for the device’s camera
- (void)getMaxZoomFactor:(void (^ _Nonnull)(float))completion;
/// Checks whether the device has a built-in flash (torch) that can be used for illumination during barcode scanning
- (void)isFlashAvailable:(void (^ _Nonnull)(BOOL))completion;
/// Adjusts the camera’s exposure dynamically based on the provided intensity, cycling through predefined compensation values.
/// \param intensity A value between 0 and 10, where 0 disables dynamic exposure. Default value is 0
///
- (void)setDynamicExposure:(NSInteger)intensity;
/// Configures the camera to use the center of the viewfinder for focus and exposure, enabling or disabling centric adjustments.
/// \param enabled [true, false]. Default value is false.
///
- (void)setCentricFocusAndExposure:(BOOL)enabled;
/// Configures the camera to use video stabilization.
/// \param enabled [true, false]. Default value is false.
///
- (void)setVideoStabilization:(BOOL)enabled;
- (void)cameraFrameReceivedWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer;
- (void)layoutSubviews;
@end

/// Represents the resolution settings for the BarkoderView.
typedef SWIFT_ENUM(NSInteger, BarkoderResolution, open) {
/// High Definition resolution (1280x720).
  BarkoderResolutionHD = 0,
/// Full High Definition resolution (1920x1080).
  BarkoderResolutionFHD = 1,
/// Ultra High (4K) Definition resolution (3840x2160).
  BarkoderResolutionUHD = 2,
};

/// Represents the available camera’s for the BarkoderView.
typedef SWIFT_ENUM(NSInteger, BarkoderCameraPosition, open) {
/// Uses the device’s back camera.
  BarkoderCameraPositionBACK = 0,
/// Uses the device’s front (selfie) camera.
  BarkoderCameraPositionFRONT = 1,
};





@interface iBarkoder (SWIFT_EXTENSION(BarkoderSDK))
/// Retrieves the version of the Barkoder library
+ (NSString * _Nonnull)GetVersion SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
